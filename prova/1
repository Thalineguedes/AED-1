#include <stdio.h>
#include <string.h>

#define MAX_ALUNOS 100

// Definição da estrutura do aluno
struct Aluno {
    int codigo;
    char nome[50];
    int idade;
    int numeroFilhos;
};

// Definição da estrutura da Lista Ligada Estática
struct ListaLigadaEstatica {
    struct Aluno alunos[MAX_ALUNOS];
    int tamanho;
};

// Função para inicializar a lista
void inicializarLista(struct ListaLigadaEstatica *lista) {
    lista->tamanho = 0;
}

// Função para verificar se um aluno está duplicado na lista
int alunoDuplicado(const struct ListaLigadaEstatica *lista, const struct Aluno *aluno) {
    for (int i = 0; i < lista->tamanho; ++i) {
        if (lista->alunos[i].codigo == aluno->codigo) {
            return 1; // Encontrou um aluno com o mesmo código
        }
    }
    return 0; // Não encontrou duplicatas
}

// Função para adicionar um aluno à lista
void adicionarAluno(struct ListaLigadaEstatica *lista, const struct Aluno *aluno) {
    if (lista->tamanho < MAX_ALUNOS && !alunoDuplicado(lista, aluno)) {
        lista->alunos[lista->tamanho++] = *aluno;
        printf("Aluno adicionado com sucesso!\n");
    } else {
        printf("Erro: Aluno já existe ou a lista está cheia.\n");
    }
}

// Função principal
int main() {
    struct ListaLigadaEstatica lista;

    // Inicializar a lista
    inicializarLista(&lista);

    // Adicionar alguns alunos para testar
    struct Aluno aluno1 = {1, "Joao", 20, 0};
    struct Aluno aluno2 = {2, "Maria", 22, 1};
    struct Aluno aluno3 = {3, "Carlos", 25, 2};
    struct Aluno aluno4 = {1, "Joao", 20, 0}; // Este aluno tem o mesmo código que aluno1

    adicionarAluno(&lista, &aluno1);
    adicionarAluno(&lista, &aluno2);
    adicionarAluno(&lista, &aluno3);
    adicionarAluno(&lista, &aluno4); // Tentando adicionar um aluno duplicado

    return 0;
}
