#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Definição da estrutura da Lista Linear
typedef struct {
    int data[MAX_SIZE];
    int length;
} SequentialList;

// Função para criar uma lista vazia
SequentialList createList() {
    SequentialList newList;
    newList.length = 0;
    return newList;
}

// Função para inserir elementos ao final da lista
void insertAtEnd(SequentialList *list, int element) {
    if (list->length < MAX_SIZE) {
        list->data[list->length] = element;
        list->length++;
    } else {
        printf("Lista cheia. Elemento %d não inserido.\n", element);
    }
}

// Função para inserir elementos ordenados
void insertOrdered(SequentialList *list, int element) {
    int i;

    if (list->length < MAX_SIZE) {
        // Encontrar a posição correta para inserção mantendo a ordem crescente
        for (i = 0; i < list->length && list->data[i] < element; i++);

        // Deslocar elementos para abrir espaço para o novo elemento
        for (int j = list->length; j > i; j--) {
            list->data[j] = list->data[j - 1];
        }

        // Inserir o novo elemento na posição correta
        list->data[i] = element;
        list->length++;
    } else {
        printf("Lista cheia. Elemento %d não inserido.\n", element);
    }
}

// Função para eliminar elemento pela chave
void deleteByKey(SequentialList *list, int key) {
    int i, found = 0;

    // Procurar a chave na lista
    for (i = 0; i < list->length; i++) {
        if (list->data[i] == key) {
            found = 1;
            break;
        }
    }

    if (found) {
        // Deslocar elementos para preencher o espaço deixado pelo elemento removido
        for (int j = i; j < list->length - 1; j++) {
            list->data[j] = list->data[j + 1];
        }

        list->length--;
        printf("Elemento %d removido com sucesso.\n", key);
    } else {
        printf("Chave %d não encontrada. Elemento não removido.\n", key);
    }
}

// Função para imprimir os elementos da lista
void printList(SequentialList list) {
    printf("Elementos da Lista: ");
    for (int i = 0; i < list.length; i++) {
        printf("%d ", list.data[i]);
    }
    printf("\n");
}

int main() {
    // Criar uma lista vazia
    SequentialList myList = createList();

    // Inserir elementos ao final da lista
    insertAtEnd(&myList, 10);
    insertAtEnd(&myList, 5);
    insertAtEnd(&myList, 20);

    // Imprimir a lista após inserção ao final
    printf("Após inserção ao final:\n");
    printList(myList);

    // Inserir elementos ordenados
    insertOrdered(&myList, 15);

    // Imprimir a lista após inserção ordenada
    printf("\nApós inserção ordenada:\n");
    printList(myList);

    // Eliminar elemento pela chave
    deleteByKey(&myList, 5);

    // Imprimir a lista após remoção
    printf("\nApós remoção:\n");
    printList(myList);

    return 0;
}
//Inserir elementos ao final da lista: Chama insertAtEnd para inserir os elementos 10, 5 e 20
//Imprimir a lista após inserção ao final: Chama printList para imprimir os elementos
//Inserir elementos ordenados: Chama insertOrdered para inserir o elemento 15.
//Imprimir a lista após inserção ordenada: Chama printList para imprimir os elementos após a inserção ordenada.
//Eliminar elemento pela chave: Chama deleteByKey para remover o elemento 5.
//Imprimir a lista após remoção: Chama printList para imprimir os elementos após a remoção.

